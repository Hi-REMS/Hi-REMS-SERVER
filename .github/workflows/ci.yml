name: Node API CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run lint:fix   # <- 자동수정
      - run: npm run lint       # <- 최종 검증(남은 에러만 잡힘)

  # ---------------- Build ----------------
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: node -v && npm -v
      - run: npm config set legacy-peer-deps true
      - run: npm ci --no-audit --no-fund
      - name: Build
        run: npm run build || echo "no build"

  # ---------------- Test (DB 포함) ----------------
  test:
    needs: build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: alliothub
        ports: [ "3306:3306" ]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -proot"
          --health-interval=10s --health-timeout=5s --health-retries=10

      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alliothub
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres -d alliothub"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: node -v && npm -v
      - run: npm config set legacy-peer-deps true
      - run: npm ci --no-audit --no-fund

      - name: Create .env for CI
        run: |
          cp .env.example .env
          {
            echo "NODE_ENV=ci"
            echo "PORT=3000"
            echo "DB_HOST=127.0.0.1"
            echo "DB_PORT=5432"
            echo "DB_NAME=alliothub"
            echo "DB_USER=postgres"
            echo "DB_PASS=postgres"
            echo "DB_SSL=false"
            echo "MYSQL_HOST=127.0.0.1"
            echo "MYSQL_PORT=3306"
            echo "MYSQL_DB=alliothub"
            echo "MYSQL_USER=root"
            echo "MYSQL_PASS=root"
            echo "MYSQL_SSL=false"
            echo "MYSQL_CONN_LIMIT=10"
            echo "CORS_ORIGIN=http://127.0.0.1:8080"
            echo "KAKAO_JS_KEY=${{ secrets.KAKAO_JS_KEY }}"
            echo "KAKAO_REST_KEY=${{ secrets.KAKAO_REST_KEY }}"
            echo "KMA_VILAGE_KEY=${{ secrets.KMA_VILAGE_KEY }}"
            echo "VWORLD_API_KEY=${{ secrets.VWORLD_API_KEY }}"
            echo "KMA_ASOS_KEY=${{ secrets.KMA_ASOS_KEY }}"
            echo "KMA_ASOS_ENDPOINT=http://apis.data.go.kr/1360000/AsosDalyInfoService/getWthrDataList"
            echo "KMA_ASOS_FALLBACK_STNID=108"
          } >> .env

      - name: Start server and wait for /health
        env:
          PORT: 3000
        run: |
          nohup npm start > server.log 2>&1 &
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "Health OK"
              break
            fi
            sleep 1
            if [ $i -eq 40 ]; then
              echo "Health check failed"
              cat server.log || true
              exit 1
            fi
          done

      - name: Run tests
        run: npm test || echo "no tests"

      - name: Upload server log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-log
          path: server.log
