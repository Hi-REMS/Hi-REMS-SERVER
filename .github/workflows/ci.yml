name: Node API CI

on:
  push:
    branches: [ "**" ]          #
  pull_request:
    branches: [ "**" ]          
  workflow_dispatch:             

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # CI 내부에서만 쓰는 테스트용 DB 컨테이너 (운영과 완전 분리)
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: alliothub
        ports: [ "3306:3306" ]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -proot"
          --health-interval=10s --health-timeout=5s --health-retries=10

      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alliothub
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres -d alliothub"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # CI용 .env 생성 (운영 DB와 분리된 로컬 컨테이너 접속값)
      - name: Create .env for CI
        run: |
          cp .env.example .env
          {
            echo "NODE_ENV=ci"
            echo "PORT=3000"

            # PostgreSQL (컨테이너)
            echo "DB_HOST=127.0.0.1"
            echo "DB_PORT=5432"
            echo "DB_NAME=alliothub"
            echo "DB_USER=postgres"
            echo "DB_PASS=postgres"
            echo "DB_SSL=false"

            # MariaDB (컨테이너)
            echo "MYSQL_HOST=127.0.0.1"
            echo "MYSQL_PORT=3306"
            echo "MYSQL_DB=alliothub"
            echo "MYSQL_USER=root"
            echo "MYSQL_PASS=root"
            echo "MYSQL_SSL=false"
            echo "MYSQL_CONN_LIMIT=10"

            # CORS
            echo "CORS_ORIGIN=http://127.0.0.1:8080"

            # 외부 API 키 (Secrets)
            echo "KAKAO_JS_KEY=${{ secrets.KAKAO_JS_KEY }}"
            echo "KAKAO_REST_KEY=${{ secrets.KAKAO_REST_KEY }}"
            echo "KMA_VILAGE_KEY=${{ secrets.KMA_VILAGE_KEY }}"
            echo "VWORLD_API_KEY=${{ secrets.VWORLD_API_KEY }}"
            echo "KMA_ASOS_KEY=${{ secrets.KMA_ASOS_KEY }}"
            echo "KMA_ASOS_ENDPOINT=http://apis.data.go.kr/1360000/AsosDalyInfoService/getWthrDataList"
            echo "KMA_ASOS_FALLBACK_STNID=108"
          } >> .env

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build (optional)
        run: npm run build || echo "no build"

      - name: Start server and wait for /health
        env:
          PORT: 3000
        run: |
          nohup npm start > server.log 2>&1 &
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "Health OK"
              break
            fi
            sleep 1
            if [ $i -eq 40 ]; then
              echo "Health check failed"
              cat server.log || true
              exit 1
            fi
          done

      - name: Run tests (optional)
        run: npm test || echo "no tests"

      - name: Upload server log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-log
          path: server.log
