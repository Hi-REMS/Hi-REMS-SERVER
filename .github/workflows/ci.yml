name: Node API CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4

      # ▶ 워크디렉토리 자동 감지: backend/package.json 있으면 backend, 없으면 루트(".")
      - name: Detect workdir
        id: detect
        run: |
          if [ -f backend/package.json ]; then
            echo "workdir=backend" >> $GITHUB_OUTPUT
          elif [ -f package.json ]; then
            echo "workdir=." >> $GITHUB_OUTPUT
          else
            echo "❌ package.json을 찾을 수 없습니다."
            exit 1
          fi
          echo "Detected workdir: ${WORKDIR:-$(cat $GITHUB_OUTPUT || true)}"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          # 두 경로 모두 캐시 후보로 지정(존재하는 쪽만 사용됨)
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json

      - name: Install deps
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          npm ci --no-audit --no-fund

      - name: Lint (fix)
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          npm run lint:fix

      - name: Lint (report)
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          npm run lint

  # ---------------- Build ----------------
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect workdir
        id: detect
        run: |
          if [ -f backend/package.json ]; then
            echo "workdir=backend" >> $GITHUB_OUTPUT
          elif [ -f package.json ]; then
            echo "workdir=." >> $GITHUB_OUTPUT
          else
            echo "❌ package.json을 찾을 수 없습니다."
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json

      - run: node -v && npm -v

      - name: Install deps
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          npm ci --no-audit --no-fund

      - name: Build
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          npm run build || echo "no build"

  # ---------------- Test (DB 포함) ----------------
  test:
    needs: build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: alliothub
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -proot"
          --health-interval=10s --health-timeout=5s --health-retries=10

      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alliothub
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d alliothub"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Detect workdir
        id: detect
        run: |
          if [ -f backend/package.json ]; then
            echo "workdir=backend" >> $GITHUB_OUTPUT
          elif [ -f package.json ]; then
            echo "workdir=." >> $GITHUB_OUTPUT
          else
            echo "❌ package.json을 찾을 수 없습니다."
            exit 1
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json

      - run: node -v && npm -v
      - run: npm config set legacy-peer-deps true

      - name: Install deps
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          npm ci --no-audit --no-fund

      - name: Create .env for CI
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          cp .env.example .env 2>/dev/null || true
          {
            echo "NODE_ENV=ci"
            echo "PORT=3000"
            echo "DB_HOST=127.0.0.1"
            echo "DB_PORT=5432"
            echo "DB_NAME=alliothub"
            echo "DB_USER=postgres"
            echo "DB_PASS=postgres"
            echo "DB_SSL=false"
            echo "MYSQL_HOST=127.0.0.1"
            echo "MYSQL_PORT=3306"
            echo "MYSQL_DB=alliothub"
            echo "MYSQL_USER=root"
            echo "MYSQL_PASS=root"
            echo "MYSQL_SSL=false"
            echo "MYSQL_CONN_LIMIT=10"
            echo "CORS_ORIGIN=http://127.0.0.1:8080"
            echo "KAKAO_JS_KEY=${{ secrets.KAKAO_JS_KEY }}"
            echo "KAKAO_REST_KEY=${{ secrets.KAKAO_REST_KEY }}"
            echo "KMA_VILAGE_KEY=${{ secrets.KMA_VILAGE_KEY }}"
            echo "VWORLD_API_KEY=${{ secrets.VWORLD_API_KEY }}"
            echo "KMA_ASOS_KEY=${{ secrets.KMA_ASOS_KEY }}"
            echo "KMA_ASOS_ENDPOINT=http://apis.data.go.kr/1360000/AsosDalyInfoService/getWthrDataList"
            echo "KMA_ASOS_FALLBACK_STNID=108"
          } >> .env

      - name: Start server and wait for /health
        env:
          PORT: 3000
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          nohup npm start > server.log 2>&1 &
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "Health OK"
              break
            fi
            sleep 1
            if [ $i -eq 40 ]; then
              echo "Health check failed"
              cat server.log || true
              exit 1
            fi
          done

      - name: Run tests
        run: |
          cd "${{ steps.detect.outputs.workdir }}"
          npm test || echo "no tests"

      - name: Upload server log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-log
          path: ${{ steps.detect.outputs.workdir }}/server.log
